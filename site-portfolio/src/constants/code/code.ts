const code1 =
  "@Client.tree.command(name='roll', description='Ask me to roll a dice!')\n@app_commands.describe(number_of_dice='How may dice?', size_of_dice='What is the dice value?')\nasync def RollDice(interaction: discord.Interaction, number_of_dice: int, size_of_dice: int):\n            start_str = f'You Rolled {number_of_dice}D{size_of_dice}:'\n            for el in range(number_of_dice):\n                        start_str += f':game_die: You Rolled: {str(randint(1, size_of_dice))}'\n            await interaction.response.send_message(f'{start_str}')';";
const code2 =
  "@app.route('/checkWord', methods=['POST'])\ndef checkWord():\n    word = request.json.get('word')\n    word = word.capitalize().lower()\n    correctWord = request.json.get('correctWord').capitalize().lower()\n    if word == correctWord:\n        return jsonify({'word': 'Green'})\n    count = 0\n    for Abc in word:\n        if word[count] == correctWord[count]:\n            letter_dict[count] = 'Green'\n        elif word[count] in correctWord:\n            letter_dict[count] = 'Orange'\n        else:\n            letter_dict[count] = 'Red'\n        count += 1\n    return jsonify(\n        {\n            'word': {\n                'Letter1': letter_dict[0],\n                'Letter2': letter_dict[1],\n                'Letter3': letter_dict[2],\n                'Letter4': letter_dict[3],\n                'Letter5': letter_dict[4],\n            }\n        }\n    )";
const code3 =
  "def AddPokemon(conn,cu):\n    value = '''INSERT INTO Pokemon(Name, Type1, Type2, Total, HP, ATK, DEF, SPDEF, SPATK, Speed, Generation, Legendary_Status) Values(?,?,?,?,?,?,?,?,?,?,?,?)'''\n    Name = input('Pokemon Name\n > > > ')\n    check = PokemonNameCheck(conn,cu,Name)\n    while check:\n        Name = input('Pokemon Name\n > > > ')\n        check = PokemonNameCheck(conn,cu,Name)\n    Type1 = input('Pokemon Primary Type\n > > > ')\n    check = PokemonTypeCheck(conn,cu,Type1)\n    while not check:\n        Type1 = input('Input Valid Primary Type\n > > > ')\n        check = PokemonTypeCheck(conn,cu,Type2)\n    Type2 = input('Pokemon Secondary Type\n\nThis CAN be left blank.\n\n > > > ')\n    check = PokemonTypeCheck(conn,cu,Type2)\n    print(Type2)\n    while not check and not Type2 == '':\n        Type2 = input('Input Valid Secondary Type\n > > > ')\n        check = PokemonTypeCheck(conn,cu,Type2)\n    HP = input('Please Input a HP \n > > > ')\n    while not HP.isnumeric() or not int(HP) in range(1,256):\n        HP = input('Please Input a Valid HP \n\n Max: 255 \n Min: 1 \n\n > > > ')\n    ATK = input('Please Input a ATK Value \n > > > ')\n    while not ATK.isnumeric() or not int(ATK) in range(1,191):\n        ATK = input('Please Input a Valid ATK \n\n Max: 190 \n Min: 1 \n\n > > > ')\n    DEF = input('Please Input a DEF Value \n > > > ')\n    while not DEF.isnumeric() or not int(DEF) in range(1,251):\n        DEF = input('Please Input a Valid DEF \n\n Max: 250 \n Min: 1 \n\n > > > ')\n    SPDEF = input('Please Input a Sp. DEF Value \n > > > ')\n    while not SPDEF.isnumeric() or not int(SPDEF) in range(1,231):\n        SPDEF = input('Please Input a Valid Sp. DEF \n\n Max: 230 \n Min: 1 \n\n > > > ')\n    SPATK = input('Please Input a Sp. ATK Value \n > > > ')\n    while not SPATK.isnumeric() or not int(SPATK) in range(195):\n        SPATK = input('Please Input a Valid Sp. ATK \n\n Max: 194 \n Min: 1 \n\n > > > ')\n    SPD = input('Please Input a Speed Value \n > > > ')\n    while not SPD.isnumeric() or not int(SPD) in range(5,201):\n        SPD = input('Please Input a Valid Speed Value \n\n Max: 200 \n Min: 5 \n\n > > > ')\n    Gen = input('Please Select a Generation for Your Pokemon \n > > > ')\n    while not Gen.isnumeric() or not int(Gen) in range(1,7): \n        Gen = input('Please Select a Valid Generation for Your Pokemon \n\n Generations: 1 - 6 | !ONLY! \n\n > > > ')\n    Legendary_Status = input('Legendary Status \n\n True or False \n\n > > > ')\n    while not Legendary_Status.lower().capitalize() in true and not Legendary_Status.lower().capitalize() in false:\n         print('\n PLEASE CHOOSE A VALID OPTION: True or False \n')\n         Legendary_Status = input('Legendary Status \n\n True or False \n\n > > > ')\n    if Legendary_Status.lower().capitalize() in true:\n        Legendary_Status = 'True'\n    elif Legendary_Status.lower().capitalize() in false:\n        Legendary_Status = 'False'\n    total = Total(int(HP),int(DEF),int(ATK),int(SPDEF),int(SPATK),int(SPD))\n    record = (Name,Type1,Type2,total,HP,DEF,ATK,SPDEF,SPATK,SPD,Gen,Legendary_Status)\n    try:\n        cu.execute(value, record)\n        conn.commit()\n        print('Successfully Added')\n    except Error as e:\n        print('An Error Occured:', e, '\n Project Not Committed')";
const code4 =
  "import { ReactNode, createContext } from 'react';\nimport useTheme from '../hooks/useTheme';\n\ninterface ThemeContextType {\n  theme: 'light' | 'dark';\n  setTheme: (theme: 'light' | 'dark') => void;\n}\n\nexport const ThemeContext = createContext<ThemeContextType | null>(null);\n\nfunction ThemeProvider({ children }: { children: ReactNode }) {\n  const { theme, setTheme } = useTheme();\n\n  return (\n    <ThemeContext.Provider value={{ theme, setTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\nexport default ThemeProvider;";

export { code1, code2, code3, code4 };
